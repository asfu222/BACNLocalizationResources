name: Deploy to Cloudflare R2

on:
  workflow_dispatch:
  push:
  repository_dispatch:
    types: [run-deployment]
  schedule:
    - cron: '0 0 * * *'  # Scheduled cache refresh
permissions:
  contents: write
jobs:
  deploy_main:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.RSS_REPO_TOKEN }} # Read-only access to necessary repos
          persist-credentials: false
      - name: Clone build dependencies
        run: git clone --depth 1 https://github.com/asfu222/BlueArchiveLocalizationTools.git
      - name: Restore FlatData Cache
        uses: actions/cache@v4
        with:
          path: BlueArchiveLocalizationTools/Extracted/FlatData
          key: ${{ runner.os }}-flatdata-${{ hashFiles('ba.env') }}

      - name: Download updated assets
        run: |
          chmod +x update.sh
          ./update.sh

      - name: Restore Excel Cache
        uses: actions/cache@v4
        with:
          path: |
            BlueArchiveLocalizationTools/Extracted/Table/Excel
            BlueArchiveLocalizationTools/Extracted/Temp/Table/Excel
          key: ${{ runner.os }}-excelzip-${{ hashFiles('Excel.zip') }}
      - name: Restore ExcelDB Cache
        uses: actions/cache@v4
        with:
          path: |
            BlueArchiveLocalizationTools/Extracted/Table/ExcelDB
          key: ${{ runner.os }}-exceldb-${{ hashFiles('ExcelDB.db') }}
          
      - name: Get latest commit hashes
        run: |
          echo "LATEST_VOICE_COMMIT=$(git ls-remote https://x-access-token:${{ secrets.RSS_REPO_TOKEN }}@github.com/asfu222/scenariovoice.git HEAD | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Restore ScenarioVoice Cache
        id: scenariovoice_cache
        uses: actions/cache@v4
        with:
          path: |
            assets/scenariovoice/latest/MediaResources/GameData/Audio/VOC_CN/zips.json
            assetsBuildSrc/scenariovoice/latest/MediaResources/GameData/voice_file_names.json
            assets/scenariovoice/latest/catalog.json
          key: ${{ runner.os }}-scenariovoice-${{ env.LATEST_VOICE_COMMIT }}

      - name: Clone scenariovoice if necessary
        if: github.event_name != 'schedule' && steps.scenariovoice_cache.outputs.cache-hit != 'true'
        run: git clone https://x-access-token:${{ secrets.RSS_REPO_TOKEN }}@github.com/asfu222/scenariovoice.git assets/scenariovoice

      - name: Setup git credentials
        run: |
            git config url."https://api:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
            git config url."https://ssh:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
            git config url."https://git:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
            git submodule foreach '
                git config url."https://api:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
                git config url."https://ssh:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
                git config url."https://git:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "git@github.com:"
            '
      - name: Configure Submodules to Track Branches
        run: |
          git submodule foreach '
            git checkout main || git checkout -b main
            git branch --set-upstream-to=origin/main main
          '
      - name: Update Submodules
        run: git submodule update --recursive --remote
        
      - name: Configure Git Identity
        if: github.event_name != 'schedule'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update Submodule References
        if: github.event_name != 'schedule'
        run: |
          submodule_paths=$(git submodule status | awk '{ print $2 }')
          for submodule in $submodule_paths; do
            git add $submodule
          done
          if git diff --cached --quiet; then
            echo "子模块已是最新状态"
          else
            git commit -m "更新子模块指针 [skip ci]"
          fi

      - name: Decompress Assets
        if: github.event_name != 'schedule'
        run: find ./assets -name '*.gz' -exec gzip -d {} \;
        
      - name: Cleanup git files
        if: github.event_name != 'schedule'
        run: find ./assets -name ".git" -exec rm -rf {} +
        
      - name: Restore Excel.zip Build Cache
        uses: actions/cache@v4
        with:
          path: |
            assets/beicheng/latest/TableBundles/Excel.zip
          key: ${{ runner.os }}-built_excelzip-${{ hashFiles('assets/beicheng/latest/TableBundles/buildSrc/Excel/*') }}-${{ hashFiles('Excel.zip') }}

      - name: Restore ExcelDB.db Build Cache
        uses: actions/cache@v4
        with:
          path: |
            assets/beicheng/latest/TableBundles/ExcelDB.db
          key: ${{ runner.os }}-built_exceldb-${{ hashFiles('assets/beicheng/latest/TableBundles/buildSrc/ExcelDB/*') }}-${{ env.LATEST_VOICE_COMMIT }}-${{ hashFiles('ExcelDB.db') }}

      - name: Build Assets
        if: github.event_name != 'schedule'
        run: |
          chmod +x build.sh
          ./build.sh
      - name: Update version.hash
        if: github.event_name != 'schedule'
        run: |
          mkdir -p ./assets/static/
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B HEAD)
          git rev-parse HEAD > ./assets/static/version.hash
          git add ./assets/static/version.hash
          if git diff --cached --quiet; then
            echo "版本号已是最新"
          else
            git commit -m "更新版本号 [skip ci]"
          fi
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REDIRECT_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H prod-clientpatch.bluearchive.me >> ~/.ssh/known_hosts

      - name: Update config files
        if: github.event_name != 'schedule'
        env:
          SCENARIOVOICE_CACHE_HIT: ${{ steps.scenariovoice_cache.outputs.cache-hit }}
        run: |
          INCLUDES="--exclude='commonpng/**' --include='*/' --include='*/catalog.json' --exclude='*'"
          
          if [ "$SCENARIOVOICE_CACHE_HIT" = "true" ]; then
            echo "Excluding scenariovoice/* from upload"
            INCLUDES="--exclude='scenariovoice/**' $INCLUDES"
          fi
          eval rsync -av --delete $INCLUDES ./assets/ ubuntu@prod-clientpatch.bluearchive.me:/home/ubuntu/nginx_redirect_server/server_cfg/
          
      - name: Restart Redirect Server
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
            cd /home/ubuntu/nginx_redirect_server/
            sudo openresty -s quit -c /home/ubuntu/nginx_redirect_server/nginx.conf || sudo pkill openresty
            sudo openresty -c /home/ubuntu/nginx_redirect_server/nginx.conf
          "

      - name: Deploy to Cloudflare R2
        if: github.event_name != 'schedule'
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT }}
          AWS_MAX_ATTEMPTS: 5
          SCENARIOVOICE_CACHE_HIT: ${{ steps.scenariovoice_cache.outputs.cache-hit }}
        run: | 
          INCLUDES="--exclude '*' \
                    --include '*.zip' \
                    --include '*.json' \
                    --include '*.html' \
                    --include 'ba.env' \
                    --include '*.hash' \
                    --include '*.db' \
                    --include '*.bytes' \
                    --exclude '*/.git/*' \
                    --exclude '*/.github/*' \
                    --exclude 'apk/*' \
                    --exclude 'commonpng/*'"
          if [ "$SCENARIOVOICE_CACHE_HIT" = "true" ]; then
              echo "Excluding scenariovoice/* from upload"
              aws s3 sync assets/scenariovoice/latest/MediaResources/Catalog s3://bluearchive/scenariovoice/latest/MediaResources/Catalog --checksum-algorithm CRC32 --exact-timestamps --delete
              INCLUDES="$INCLUDES --exclude 'scenariovoice/*'"
          fi
          eval aws s3 sync assets/ s3://bluearchive/ --checksum-algorithm CRC32 $INCLUDES --exact-timestamps --delete
  
      - name: Purge Cloudflare Cache
        if: github.event_name != 'schedule'
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
             -H "Authorization: Bearer ${{ secrets.CF_PURGE_TOKEN }}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}'  
      - name: Purge Edge Servers Cache
        if: github.event_name != 'schedule'
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
          cd /home/ubuntu/nginx_redirect_server/ &&
          nohup timeout 600 ./clear-edge-cache.sh > clear-edge-cache.log 2>&1 &
          "
      - name: Push changes
        if: github.event_name != 'schedule'
        run: |
          git reset --hard
          git pull --rebase
          git push origin
  deploy_bundles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.COMMONPNG_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.REDIRECT_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H prod-clientpatch.bluearchive.me >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: Download updated assets
        run: |
          chmod +x update_bundles.sh
          ./update_bundles.sh

      - name: Get latest commonpng commit hash
        run: |
          echo "LATEST_PNG_COMMIT=$(git ls-remote git@github.com:asfu222/commonpng.git HEAD | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Restore commonpng cache
        id: commonpng_cache
        uses: actions/cache@v4
        with:
          path: |
            assets/commonpng/latest/catalog.json
          key: commonpng-${{ env.LATEST_PNG_COMMIT }}-${{ hashFiles('BundlePackingInfo*.json') }}

      - name: Clone commonpng if necessary
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          git clone git@github.com:asfu222/commonpng.git assets/commonpng
          python lfs.py join assets/commonpng

      - name: Build Assets
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          chmod +x build_bundles.sh
          ./build_bundles.sh

      - name: Configure Git Identity
        if: github.event_name != 'schedule'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update bundle version
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          echo "commonpng-${{ env.LATEST_PNG_COMMIT }}-${{ hashFiles('BundlePackingInfo*.json') }}" > assets/static/bundle_version.hash
          git add assets/static/bundle_version.hash
          git commit -m "更新图文版本号 [skip ci]"

      - name: Update config files
        if: github.event_name != 'schedule'
        run: |
          rsync -av --delete ./assets/commonpng/latest/ ubuntu@prod-clientpatch.bluearchive.me:/home/ubuntu/nginx_redirect_server/server_cfg/commonpng/latest/
          
      - name: Restart Redirect Server
        if: github.event_name != 'schedule'
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
            cd /home/ubuntu/nginx_redirect_server/
            sudo openresty -s quit -c /home/ubuntu/nginx_redirect_server/nginx.conf || sudo pkill openresty
            sudo openresty -c /home/ubuntu/nginx_redirect_server/nginx.conf
          "
          
      - name: Deploy to Cloudflare R2
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT }}
          AWS_MAX_ATTEMPTS: 5
        run: | 
          INCLUDES="--exclude '*' \
                    --include '*.zip' \
                    --include '*.json' \
                    --include '*.hash' \
                    --include '*.bytes' \
                    --exclude '*/.git/*' \
                    --exclude '*/.github/*'"
          eval aws s3 sync assets/commonpng/latest s3://bluearchive/commonpng/latest --checksum-algorithm CRC32 $INCLUDES --exact-timestamps --delete
          aws s3 cp assets/static/bundle_version.hash s3://bluearchive/static/bundle_version.hash

      - name: Purge Cloudflare Cache
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
             -H "Authorization: Bearer ${{ secrets.CF_PURGE_TOKEN }}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}'  

      - name: Purge Edge Servers Cache
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
          cd /home/ubuntu/nginx_redirect_server/ &&
          nohup timeout 600 ./clear-edge-cache.sh > clear-edge-cache.log 2>&1 &
          "

      - name: Push changes
        if: github.event_name != 'schedule' && steps.commonpng_cache.outputs.cache-hit != 'true'
        run: |
          git reset --hard
          git pull --rebase
          git push origin
